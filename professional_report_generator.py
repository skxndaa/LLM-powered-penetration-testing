#!/usr/bin/env python3
"""Simple placeholder professional report generator.
Generates a markdown report summarizing the latest pentest run.
This is a minimal implementation so that the web interface can
successfully download something. Extend as needed.
"""
import json
import os
from datetime import datetime
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parent
RESULTS_DIR = PROJECT_ROOT / 'pentest_results'
RESULTS_DIR.mkdir(exist_ok=True)

SESSION_STATE_FILE = RESULTS_DIR / 'session_state.json'
REPORT_FILE = RESULTS_DIR / 'PROFESSIONAL_REPORT.md'

def load_session_state():
    if SESSION_STATE_FILE.exists():
        try:
            with open(SESSION_STATE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            pass
    # fallback empty state
    return {
        'target_ip': 'N/A',
        'open_ports': [],
        'vulnerabilities': [],
        'notes': 'No session_state.json found. This is a placeholder report.'
    }

def generate_markdown(state):
    ts = datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
    md = [
        f"# Professional Penetration Test Report\n",
        f"_Generated: {ts}_\n",
        '\n',
        f"**Target:** {state.get('target_ip', 'Unknown')}\n",
        '\n',
        '## Summary\n',
        'This is an autogenerated placeholder report. Replace this generator\n',
        'with a full reporting engine that analyses scan results.\n',
        '\n',
        '## Open Ports\n',
    ]
    open_ports = state.get('open_ports', [])
    if open_ports:
        for p in open_ports:
            md.append(f"- {p}\n")
    else:
        md.append('No port information available.\n')

    md.append('\n## Vulnerabilities\n')
    vulns = state.get('vulnerabilities', [])
    if vulns:
        for v in vulns:
            md.append(f"- {v}\n")
    else:
        md.append('No vulnerability data available.\n')

    md.append('\n---\nReport generated by the placeholder script. Customize as needed.\n')
    return ''.join(md)

def main():
    state = load_session_state()
    markdown = generate_markdown(state)
    REPORT_FILE.write_text(markdown, encoding='utf-8')
    print(f"Report written to {REPORT_FILE}")

if __name__ == '__main__':
    main()
